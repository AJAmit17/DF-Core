// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Company {
  id              String       @id @default(uuid())
  name            String
  userId          String
  billboards      Billboard[]  @relation("StoreToBillboard")
  categories      Category[]   @relation("StoreToCategory")
  products        Product[]    @relation("StoreToProduct")
  sizes           Size[]       @relation("StoreToSize")
  colors          Color[]      @relation("StoreToColor")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Billboard {
  id             String      @id @default(uuid())
  companyId        String
  company          Company       @relation("StoreToBillboard", fields: [companyId], references: [id])
  label          String
  imageUrl       String
  categories     Category[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([companyId])
}

model Category {
  id            String      @id @default(uuid())
  companyId     String      // Foreign Key to Store
  company         Company       @relation("StoreToCategory", fields: [companyId], references: [id])
  billboardId   String      // Foreign Key to Billboard
  billboard     Billboard   @relation(fields: [billboardId], references: [id])
  name          String
  products      Product[]   @relation("CategoryToProduct")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([companyId])
  @@index([billboardId])
}


model Product {
  id            String        @id @default(uuid())
  companyId     String        // Foreign Key to Store
  company         Company         @relation("StoreToProduct", fields: [companyId], references: [id])
  categoryId    String        // Foreign Key to Category
  category      Category      @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name          String    
  price         Decimal    
  isFeatured    Boolean       @default(false)
  isArchived    Boolean       @default(false)
  sizeId        String        // Foreign Key to Size
  size          Size          @relation(fields: [sizeId], references: [id])
  colorId       String        // Foreign Key to Color
  color         Color         @relation(fields: [colorId], references: [id])
  images        Image[]       // Relation to Image model
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([companyId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Size {
  id          String      @id @default(uuid())
  companyId   String      // Foreign Key to Store
  company       Company       @relation("StoreToSize", fields: [companyId], references: [id])
  name        String  
  value       String  
  products    Product[]   // Relation to Product model
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([companyId])
}

model Color {
  id          String     @id @default(uuid())
  companyId   String     // Foreign Key to Store
  company     Company      @relation("StoreToColor", fields: [companyId], references: [id])
  name        String
  value       String
  products    Product[]  // Relation to Product model
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([companyId])
}

model Image {
  id           String      @id @default(uuid())
  productId    String      // Foreign Key to Product
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  url          String      // URL of the image
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([productId])
}